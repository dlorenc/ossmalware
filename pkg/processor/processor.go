package processor

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"

	"github.com/docker/docker/client"
	"github.com/jordan-wright/ossmalware/pkg/docker"
	"github.com/jordan-wright/ossmalware/pkg/library"
	"github.com/jordan-wright/ossmalware/pkg/sysdig"
	"github.com/jordan-wright/ossmalware/pkg/tcpdump"
)

type Processor interface {
	// Process expects that a
	Process(ctx context.Context, cli *client.Client, pkg library.Package) (*library.Output, error)
}

type BaseProcessor struct {
	PackageID string
	Output    *library.Output

	sysdigProc       *sysdig.Process
	tcpdumpContainer *tcpdump.Container
}

func (p *BaseProcessor) StartMonitoring(ctx context.Context, cli docker.DockerClient) error {
	wd, _ := os.Getwd()
	log.Printf("Starting sysdig")
	scapPath := filepath.Join(wd, fmt.Sprintf("%s.scap", p.PackageID))
	sysdig, err := sysdig.Run(ctx, p.PackageID, scapPath, SysdigFiltersPyPI...)
	if err != nil {
		return err
	}
	p.sysdigProc = sysdig
	p.Output.Files = append(p.Output.Files, scapPath)

	log.Printf("Creating tcpdump container")
	tcpDumpName := fmt.Sprintf("tcpdump-%s", p.PackageID)
	pcapPath := filepath.Join(wd, fmt.Sprintf("%s.pcap", p.PackageID))
	tcpdump, err := tcpdump.Run(ctx, cli, tcpDumpName, pcapPath, IgnoredHostsPyPI...)
	if err != nil {
		return err
	}
	p.tcpdumpContainer = tcpdump
	log.Printf("Saving to %s/%s.pcap", wd, p.PackageID)
	p.Output.Files = append(p.Output.Files, pcapPath)
	return nil
}

func (p *BaseProcessor) StopMonitoring() error {
	err := p.tcpdumpContainer.Stop()
	if err != nil {
		return err
	}
	return p.sysdigProc.Stop()
}

func (p *BaseProcessor) parseBehavior(sysdigFilters []string) error {
	wd, _ := os.Getwd()
	log.Printf("Parsing sysdig output")
	scapPath := filepath.Join(wd, fmt.Sprintf("%s.scap", p.PackageID))
	behavior, err := sysdig.ParseMetadata(scapPath, sysdigFilters...)
	if err != nil {
		return fmt.Errorf("error parsing sysdig output: %w", err)
	}
	p.Output.Behavior = behavior

	pcapPath := filepath.Join(wd, fmt.Sprintf("%s.pcap", p.PackageID))
	lookups, err := tcpdump.ParseLookups(pcapPath)
	if err != nil {
		return fmt.Errorf("error parsing tcpdump output: %w", err)
	}
	p.Output.Behavior.DNSLookups = lookups

	behaviorPath := filepath.Join(wd, fmt.Sprintf("%s_behavior.json", p.PackageID))
	encodedBehavior, err := json.Marshal(behavior)
	if err != nil {
		return fmt.Errorf("error marshaling behavior: %w", err)
	}
	ioutil.WriteFile(behaviorPath, encodedBehavior, 0644)
	p.Output.Files = append(p.Output.Files, behaviorPath)

	return nil
}
