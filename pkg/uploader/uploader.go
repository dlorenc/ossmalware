package uploader

import (
	"context"
	"fmt"
	"io"
	"log"
	"os"
	"path/filepath"

	"github.com/jordan-wright/ossmalware/pkg/library"
	"gocloud.dev/blob"
	_ "gocloud.dev/blob/gcsblob"
	_ "gocloud.dev/blob/s3blob"
)

type BlobUploader struct {
	bucket *blob.Bucket
}

func NewBlobUploader() (*BlobUploader, error) {
	bucket, err := blob.OpenBucket(context.Background(), os.Getenv("OSSMALWARE_UPLOAD_BUCKET_URL"))
	if err != nil {
		return nil, err
	}
	return &BlobUploader{
		bucket: bucket,
	}, nil
}

func (up *BlobUploader) Upload(output library.Output) error {
	keyRoot := filepath.Join(output.Package.Type, output.Package.ID())
	for _, fn := range output.Files {
		key := filepath.Join(keyRoot, filepath.Base(fn))
		log.Printf("uploading %s to %s/%s", fn, up.bucket, key)
		f, err := os.Open(fn)
		if err != nil {
			return err
		}
		defer os.Remove(fn)
		w, err := up.bucket.NewWriter(context.Background(), key, nil)
		if err != nil {
			return err
		}
		if _, err := io.Copy(w, f); err != nil {
			return fmt.Errorf("error uploading to s3: %w", err)
		}
		w.Close()
	}
	return nil
}
