package consumer

import (
	"encoding/json"
	"errors"
	"log"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/sqs"
	"github.com/jordan-wright/ossmalware/pkg/library"
)

var ErrEmpty = errors.New("no messages in queue")

type Consumer interface {
	Next() (library.Package, error)
}

type SQSConsumer struct {
	client   *sqs.SQS
	queueURL *string
}

func NewSQSConsumer(sess *session.Session, queue string) (*SQSConsumer, error) {
	client := sqs.New(sess)
	result, err := client.GetQueueUrl(&sqs.GetQueueUrlInput{
		QueueName: &queue,
	})
	if err != nil {
		return nil, err
	}
	consumer := &SQSConsumer{
		client:   client,
		queueURL: result.QueueUrl,
	}
	return consumer, nil
}

func (c *SQSConsumer) Next() (library.Package, error) {
	log.Printf("attempting to fetch message from %s", *c.queueURL)
	msgResult, err := c.client.ReceiveMessage(&sqs.ReceiveMessageInput{
		QueueUrl:            c.queueURL,
		MaxNumberOfMessages: aws.Int64(1),
		VisibilityTimeout:   aws.Int64(60 * 30),
	})

	if err != nil {
		return library.Package{}, err
	}

	if len(msgResult.Messages) == 0 {
		return library.Package{}, ErrEmpty
	}

	pkg := library.Package{}
	msg := msgResult.Messages[0]
	json.Unmarshal([]byte(*msg.Body), &pkg)

	c.client.DeleteMessage(&sqs.DeleteMessageInput{
		ReceiptHandle: msg.ReceiptHandle,
		QueueUrl:      c.queueURL,
	})

	return pkg, nil
}
