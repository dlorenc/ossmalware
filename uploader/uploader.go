package uploader

import (
	"fmt"
	"log"
	"os"
	"path/filepath"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/s3/s3manager"
	"github.com/jordan-wright/ossmalware/pkg/library"
)

type S3Uploader struct {
	client *s3manager.Uploader
	bucket string
}

func NewS3Uploader(sess *session.Session, bucket string) (*S3Uploader, error) {
	client := s3manager.NewUploader(sess)
	return &S3Uploader{
		client: client,
		bucket: bucket,
	}, nil
}

func (up *S3Uploader) Upload(output library.Output) error {
	keyRoot := filepath.Join(output.Package.Type, output.Package.ID())
	for _, fn := range output.Files {
		key := filepath.Join(keyRoot, filepath.Base(fn))
		log.Printf("uploading %s to %s/%s", fn, up.bucket, key)
		f, err := os.Open(fn)
		if err != nil {
			return err
		}
		_, err = up.client.Upload(&s3manager.UploadInput{
			Bucket: aws.String(up.bucket),
			Key:    aws.String(key),
			Body:   f,
		})
		if err != nil {
			return fmt.Errorf("error uploading to s3: %w", err)
		}
		err = os.Remove(fn)
		if err != nil {
			return fmt.Errorf("error removing uploaded file %s: %w", fn, err)
		}
	}
	return nil
}
